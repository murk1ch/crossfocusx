from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
import os

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã ---
# –ï—Å–ª–∏ –Ω–∞ Render –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL (PostgreSQL) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
db_url = os.environ.get("DATABASE_URL")
if db_url:
    # Render –≤—ã–¥–∞—ë—Ç URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ postgres://, SQLAlchemy –∂–¥—ë—Ç postgresql://
    if db_url.startswith("postgres://"):
        db_url = db_url.replace("postgres://", "postgresql://", 1)
    app.config['SQLALCHEMY_DATABASE_URI'] = db_url
else:
    # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///licenses.db'

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# --- –ú–æ–¥–µ–ª—å –ª–∏—Ü–µ–Ω–∑–∏–∏ ---
class License(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    hwid = db.Column(db.String(128), unique=True, nullable=False)
    status = db.Column(db.String(20), default='active')  # active / revoked
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    expires_at = db.Column(db.DateTime, nullable=True)
    notes = db.Column(db.String(255), nullable=True)

    def is_valid(self):
        if self.status != 'active':
            return False
        if self.expires_at and datetime.utcnow() > self.expires_at:
            return False
        return True

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
with app.app_context():
    db.create_all()

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
@app.route("/")
def index():
    # –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω test1.html –≤ –ø–∞–ø–∫–µ templates
    try:
        return render_template("test1.html")
    except:
        return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üéØ"

# --- API: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ ---
@app.route("/check_license", methods=["POST"])
def check_license():
    data = request.get_json()
    if not data or "hwid" not in data:
        return jsonify({"error": "HWID required"}), 400

    hwid = data["hwid"]
    lic = License.query.filter_by(hwid=hwid).first()
    if lic and lic.is_valid():
        return jsonify({"valid": True})
    return jsonify({"valid": False})

# --- API: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ ---
@app.route("/register_license", methods=["POST"])
def register_license():
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞: –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_KEY
    admin_key = os.environ.get("ADMIN_KEY", "secret123")
    key = request.headers.get("X-Admin-Key")
    if key != admin_key:
        return jsonify({"error": "Unauthorized"}), 403

    data = request.get_json()
    if not data or "hwid" not in data:
        return jsonify({"error": "HWID required"}), 400

    hwid = data["hwid"]
    expires_days = data.get("expires_days")  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    notes = data.get("notes")

    if License.query.filter_by(hwid=hwid).first():
        return jsonify({"error": "License already exists"}), 400

    expires_at = None
    if expires_days:
        expires_at = datetime.utcnow() + timedelta(days=int(expires_days))

    lic = License(hwid=hwid, expires_at=expires_at, notes=notes)
    db.session.add(lic)
    db.session.commit()

    return jsonify({"message": "License registered", "hwid": hwid})

# --- API: –æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏ ---
@app.route("/revoke_license", methods=["POST"])
def revoke_license():
    admin_key = os.environ.get("ADMIN_KEY", "secret123")
    key = request.headers.get("X-Admin-Key")
    if key != admin_key:
        return jsonify({"error": "Unauthorized"}), 403

    data = request.get_json()
    if not data or "hwid" not in data:
        return jsonify({"error": "HWID required"}), 400

    hwid = data["hwid"]
    lic = License.query.filter_by(hwid=hwid).first()
    if not lic:
        return jsonify({"error": "License not found"}), 404

    lic.status = "revoked"
    db.session.commit()

    return jsonify({"message": "License revoked", "hwid": hwid})

# --- –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
